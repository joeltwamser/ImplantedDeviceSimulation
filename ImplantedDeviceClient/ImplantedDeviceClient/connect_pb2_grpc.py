# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import connect_pb2 as connect__pb2


class ConnectionStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Initialization = channel.unary_unary(
                '/connect.Connection/Initialization',
                request_serializer=connect__pb2.Initialize.SerializeToString,
                response_deserializer=connect__pb2.GraphSamples.FromString,
                )
        self.FrequencyChange = channel.unary_unary(
                '/connect.Connection/FrequencyChange',
                request_serializer=connect__pb2.Frequency.SerializeToString,
                response_deserializer=connect__pb2.GraphSamples.FromString,
                )
        self.PhaseChange = channel.unary_unary(
                '/connect.Connection/PhaseChange',
                request_serializer=connect__pb2.Phase.SerializeToString,
                response_deserializer=connect__pb2.GraphSamples.FromString,
                )


class ConnectionServicer(object):
    """The greeting service definition.
    """

    def Initialization(self, request, context):
        """Sends a greeting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FrequencyChange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PhaseChange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConnectionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Initialization': grpc.unary_unary_rpc_method_handler(
                    servicer.Initialization,
                    request_deserializer=connect__pb2.Initialize.FromString,
                    response_serializer=connect__pb2.GraphSamples.SerializeToString,
            ),
            'FrequencyChange': grpc.unary_unary_rpc_method_handler(
                    servicer.FrequencyChange,
                    request_deserializer=connect__pb2.Frequency.FromString,
                    response_serializer=connect__pb2.GraphSamples.SerializeToString,
            ),
            'PhaseChange': grpc.unary_unary_rpc_method_handler(
                    servicer.PhaseChange,
                    request_deserializer=connect__pb2.Phase.FromString,
                    response_serializer=connect__pb2.GraphSamples.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'connect.Connection', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Connection(object):
    """The greeting service definition.
    """

    @staticmethod
    def Initialization(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/connect.Connection/Initialization',
            connect__pb2.Initialize.SerializeToString,
            connect__pb2.GraphSamples.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FrequencyChange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/connect.Connection/FrequencyChange',
            connect__pb2.Frequency.SerializeToString,
            connect__pb2.GraphSamples.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PhaseChange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/connect.Connection/PhaseChange',
            connect__pb2.Phase.SerializeToString,
            connect__pb2.GraphSamples.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
